/**
 * PredictionEndpoint
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/ImageUrl', 'model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/ImageUrl'), require('../model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.PredictionEndpoint) {
      root.PredictionEndpoint = {};
    }
    root.PredictionEndpoint.DefaultApi = factory(root.PredictionEndpoint.ApiClient, root.PredictionEndpoint.ImageUrl, root.PredictionEndpoint.InlineResponse200);
  }
}(this, function(ApiClient, ImageUrl, InlineResponse200) {
  'use strict';

  /**
   * Default service.
   * @module api/DefaultApi
   * @version 1.0
   */

  /**
   * Constructs a new DefaultApi. 
   * @alias module:api/DefaultApi
   * @class
   * @param {module:ApiClient} apiClient Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the predictImage operation.
     * @callback module:api/DefaultApi~predictImageCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict an image
     * @param {String} projectId The project to evaluate against
     * @param {File} imageData 
     * @param {Object} opts options
     * @param {String} opts.predictionKey the prediction key
     * @param {String} opts.iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified.
     * @param {String} opts.application Optional. Specifies the name of application using the endpoint.
     * @param {module:api/DefaultApi~predictImageCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.predictImage = function(projectId, imageData, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling predictImage");
      }

      // verify the required parameter 'imageData' is set
      if (imageData == undefined || imageData == null) {
        throw new Error("Missing the required parameter 'imageData' when calling predictImage");
      }

      // added manually 5/22/17
      postBody = imageData;

      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'iterationId': opts['iterationId'],
        'application': opts['application']
      };
      var headerParams = {
        // added manually 5/22/17
        'Prediction-Key': opts['predictionKey']
      };
      var formParams = {
        'imageData': imageData
      };

      var authNames = [];

      // modified manually 5/22/17
      var contentTypes = ['application/octet-stream'];
      
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/{projectId}/image', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the predictImageUrl operation.
     * @callback module:api/DefaultApi~predictImageUrlCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Predict an image url
     * @param {String} projectId The project to evaluate against
     * @param {module:model/ImageUrl} imageUrl An {Microsoft.Cognitive.CustomVision.Models.ImageUrl} that contains the url of the image to be evaluated
     * @param {Object} opts Optional parameters
     * @param {String} opts.iterationId Optional. Specifies the id of a particular iteration to evaluate against.              The default iteration for the project will be used when not specified.
     * @param {String} opts.application Optional. Specifies the name of application using the endpoint.
     * @param {module:api/DefaultApi~predictImageUrlCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.predictImageUrl = function(projectId, imageUrl, opts, callback) {
      opts = opts || {};
      var postBody = imageUrl;

      // verify the required parameter 'projectId' is set
      if (projectId == undefined || projectId == null) {
        throw new Error("Missing the required parameter 'projectId' when calling predictImageUrl");
      }

      // verify the required parameter 'imageUrl' is set
      if (imageUrl == undefined || imageUrl == null) {
        throw new Error("Missing the required parameter 'imageUrl' when calling predictImageUrl");
      }


      var pathParams = {
        'projectId': projectId
      };
      var queryParams = {
        'iterationId': opts['iterationId'],
        'application': opts['application']
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json', 'text/json', '', '', 'application/x-www-form-urlencoded'];
      var accepts = ['application/json', 'text/json', '', ''];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/{projectId}/url', 'POST',
        pathParams, queryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));
